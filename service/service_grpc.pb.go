// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PDSClient is the client API for PDS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PDSClient interface {
	Start(ctx context.Context, opts ...grpc.CallOption) (PDS_StartClient, error)
	StartProgressive(ctx context.Context, opts ...grpc.CallOption) (PDS_StartProgressiveClient, error)
}

type pDSClient struct {
	cc grpc.ClientConnInterface
}

func NewPDSClient(cc grpc.ClientConnInterface) PDSClient {
	return &pDSClient{cc}
}

func (c *pDSClient) Start(ctx context.Context, opts ...grpc.CallOption) (PDS_StartClient, error) {
	stream, err := c.cc.NewStream(ctx, &PDS_ServiceDesc.Streams[0], "/PDS/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &pDSStartClient{stream}
	return x, nil
}

type PDS_StartClient interface {
	Send(*RequestMessage) error
	Recv() (*ServiceMessage, error)
	grpc.ClientStream
}

type pDSStartClient struct {
	grpc.ClientStream
}

func (x *pDSStartClient) Send(m *RequestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pDSStartClient) Recv() (*ServiceMessage, error) {
	m := new(ServiceMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pDSClient) StartProgressive(ctx context.Context, opts ...grpc.CallOption) (PDS_StartProgressiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PDS_ServiceDesc.Streams[1], "/PDS/StartProgressive", opts...)
	if err != nil {
		return nil, err
	}
	x := &pDSStartProgressiveClient{stream}
	return x, nil
}

type PDS_StartProgressiveClient interface {
	Send(*RequestMessage) error
	Recv() (*ServiceMessage, error)
	grpc.ClientStream
}

type pDSStartProgressiveClient struct {
	grpc.ClientStream
}

func (x *pDSStartProgressiveClient) Send(m *RequestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pDSStartProgressiveClient) Recv() (*ServiceMessage, error) {
	m := new(ServiceMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PDSServer is the server API for PDS service.
// All implementations must embed UnimplementedPDSServer
// for forward compatibility
type PDSServer interface {
	Start(PDS_StartServer) error
	StartProgressive(PDS_StartProgressiveServer) error
	mustEmbedUnimplementedPDSServer()
}

// UnimplementedPDSServer must be embedded to have forward compatible implementations.
type UnimplementedPDSServer struct {
}

func (UnimplementedPDSServer) Start(PDS_StartServer) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedPDSServer) StartProgressive(PDS_StartProgressiveServer) error {
	return status.Errorf(codes.Unimplemented, "method StartProgressive not implemented")
}
func (UnimplementedPDSServer) mustEmbedUnimplementedPDSServer() {}

// UnsafePDSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDSServer will
// result in compilation errors.
type UnsafePDSServer interface {
	mustEmbedUnimplementedPDSServer()
}

func RegisterPDSServer(s grpc.ServiceRegistrar, srv PDSServer) {
	s.RegisterService(&PDS_ServiceDesc, srv)
}

func _PDS_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PDSServer).Start(&pDSStartServer{stream})
}

type PDS_StartServer interface {
	Send(*ServiceMessage) error
	Recv() (*RequestMessage, error)
	grpc.ServerStream
}

type pDSStartServer struct {
	grpc.ServerStream
}

func (x *pDSStartServer) Send(m *ServiceMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pDSStartServer) Recv() (*RequestMessage, error) {
	m := new(RequestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PDS_StartProgressive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PDSServer).StartProgressive(&pDSStartProgressiveServer{stream})
}

type PDS_StartProgressiveServer interface {
	Send(*ServiceMessage) error
	Recv() (*RequestMessage, error)
	grpc.ServerStream
}

type pDSStartProgressiveServer struct {
	grpc.ServerStream
}

func (x *pDSStartProgressiveServer) Send(m *ServiceMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pDSStartProgressiveServer) Recv() (*RequestMessage, error) {
	m := new(RequestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PDS_ServiceDesc is the grpc.ServiceDesc for PDS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PDS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PDS",
	HandlerType: (*PDSServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Start",
			Handler:       _PDS_Start_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StartProgressive",
			Handler:       _PDS_StartProgressive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
